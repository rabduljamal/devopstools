---
- name: Check if K3s is installed
  stat:
    path: /usr/local/bin/k3s
  register: k3s_installed

- name: Uninstall K3s if installed
  shell: /usr/local/bin/k3s-uninstall.sh
  when: k3s_installed.stat.exists
  ignore_errors: yes

- name: Remove leftover K3s files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/local/bin/k3s
    - /usr/local/bin/k3s-uninstall.sh
    - /etc/rancher
    - /var/lib/rancher
  when: k3s_installed.stat.exists

# Jika ha_mode == true dan ini adalah master pertama, gunakan --cluster-init
- name: Install K3s on first master node with cluster-init in HA mode
  shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server --cluster-init
  when: ha_mode and inventory_hostname == groups['masters'][0]
  args:
    creates: /usr/local/bin/k3s

# Jika tidak dalam HA mode (hanya satu master), instal K3s tanpa --cluster-init
- name: Install K3s on first and only master node in non-HA mode
  shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -s - server
  when: not ha_mode and inventory_hostname == groups['masters'][0]
  args:
    creates: /usr/local/bin/k3s

# Get K3s token from the first master node (both HA and non-HA)
- name: Get K3s token from the first master node
  slurp:
    src: /var/lib/rancher/k3s/server/token
  register: k3s_token_raw
  when: inventory_hostname == groups['masters'][0] and k3s_installed.stat.exists

- name: Set K3s token fact
  set_fact:
    k3s_token: "{{ k3s_token_raw.content | b64decode }}"
  when: k3s_token_raw.content is defined and inventory_hostname == groups['masters'][0]

- name: Get master node IP
  command: hostname -I
  register: master_ip_raw
  when: inventory_hostname == groups['masters'][0]

- name: Set master IP fact
  set_fact:
    master_ip: "{{ master_ip_raw.stdout.split()[0] }}"
  when: inventory_hostname == groups['masters'][0]

# Instal K3s di master lain jika ha_mode == true
- name: Install K3s on other master nodes in HA mode
  shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} K3S_TOKEN={{ k3s_token }} sh -s - server --server https://{{ hostvars[groups['masters'][0]].master_ip }}:6443
  when: ha_mode and inventory_hostname != groups['masters'][0]
  args:
    creates: /usr/local/bin/k3s

# Instal agen K3s di worker nodes (baik HA maupun non-HA)
- name: Install K3s agent on worker nodes
  shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} K3S_TOKEN={{ k3s_token }} sh -s - agent --server https://{{ hostvars[groups['masters'][0]].master_ip }}:6443
  when: inventory_hostname in groups['workers'] and k3s_token is defined
  args:
    creates: /usr/local/bin/k3s-agent

# Ensure the .kube directory exists
- name: Ensure .kube directory exists
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  when: inventory_hostname == groups['masters'][0]

# Copy Kubeconfig to ~/.kube/config on the first master node
- name: Copy Kubeconfig to user's home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/{{ ansible_user }}/.kube/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  when: inventory_hostname == groups['masters'][0]

# Replace server IP in kubeconfig to point to the first master's IP
- name: Replace server IP in kubeconfig
  replace:
    path: /home/{{ ansible_user }}/.kube/config
    regexp: "127.0.0.1"
    replace: "{{ hostvars[inventory_hostname].master_ip }}"
  when: inventory_hostname == groups['masters'][0]

- name: Install Metrics Server
  become: yes
  command: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
  when: inventory_hostname == groups['masters'][0]
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
